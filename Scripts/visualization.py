# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AnAo0dUvb6XeXkS_EVvN108dnStYMp5r
"""

# For New Data

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from textblob import TextBlob
import json

dataset_paths = [
    '/content/medicine_prescription_records.csv',
    '/content/medicine_dataset.csv',
    '/content/medicine_data.csv',
    '/content/drugsComTrain_raw.csv',
    '/content/drug200.csv'
]

def display_csv_heads(paths):
    for path in paths:
        print(f"\n File: {path}")
        try:
            df = pd.read_csv(path)
            print(df.head())
            print(f" Shape: {df.shape} | Columns: {list(df.columns)}\n")
            print("-" * 80)
        except Exception as e:
            print(f" Could not read {path}. Error: {e}\n")

display_csv_heads(dataset_paths)

#  Data Preprocessing

print("Loading datasets...")
medicine_prescription = pd.read_csv('/content/medicine_prescription_records.csv')
medicine_dataset = pd.read_csv('/content/medicine_dataset.csv', low_memory=False)
medicine_data = pd.read_csv('/content/medicine_data.csv')
drugs_reviews = pd.read_csv('/content/drugsComTrain_raw.csv')
drug200 = pd.read_csv('/content/drug200.csv')
print("Datasets loaded successfully.\n")

print("Starting data preprocessing...\n")

# 1. Handling Missing Values
print("Handling missing values...")
medicine_prescription.dropna(inplace=True)
medicine_dataset.fillna("Unknown", inplace=True)
medicine_data.dropna(inplace=True)
drugs_reviews.dropna(subset=['condition', 'review'], inplace=True)
drug200.dropna(inplace=True)
print("Missing values handled.\n")

# 2. Dealing with Mixed Data Types
print("Converting product_price to numeric format...")
medicine_dataset = medicine_dataset.convert_dtypes()
medicine_data['product_price'] = pd.to_numeric(
    medicine_data['product_price'].replace('[\\u20B9,]', '', regex=True), errors='coerce'
)
medicine_data.dropna(subset=['product_price'], inplace=True)
print("Data types converted.\n")

# 3. Parsing drug_interactions JSON column (with enhanced error handling)
print("Parsing drug_interactions column...")
def parse_json_column(x):
    try:
        if isinstance(x, str):
            return list(json.loads(x).get('drug', []))
        return []
    except (json.JSONDecodeError, TypeError, ValueError):
        return []

medicine_data['drug_interactions'] = medicine_data['drug_interactions'].apply(parse_json_column)
print("JSON parsing complete.\n")

# 4. Feature Engineering: Sentiment Analysis on reviews
print("Performing sentiment analysis on reviews...")
drugs_reviews['sentiment_score'] = drugs_reviews['review'].apply(lambda x: TextBlob(str(x)).sentiment.polarity)
print("Sentiment scores calculated.\n")

# 5. Data Integration: Merging datasets
print("Merging datasets...")
merged_data = pd.merge(drugs_reviews, medicine_dataset, left_on='drugName', right_on='name', how='left')
merged_data = pd.merge(merged_data, medicine_data, left_on='drugName', right_on='product_name', how='left')
print(f"Merged dataset shape: {merged_data.shape}\n")

# Save preprocessed data
merged_data.to_csv('/content/preprocessed_merged_data.csv', index=False)
print("Preprocessed data saved successfully.\n")

# Exploratory Data Analysis (EDA)

print("Starting Enhanced EDA for Project Objective...\n")

# 1. Summary Statistics
print("Descriptive Statistics for Ratings:\n", merged_data['rating'].describe())
print("Descriptive Statistics for Product Prices:\n", merged_data['product_price'].describe())

# 2. Rating Distribution
plt.figure(figsize=(10, 6))
sns.histplot(merged_data['rating'], bins=10, kde=True, color='skyblue')
plt.title('Rating Distribution')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# 3. Sentiment Score Distribution
plt.figure(figsize=(10, 6))
sns.histplot(merged_data['sentiment_score'], bins=20, kde=True, color='lightgreen')
plt.title('Sentiment Score Distribution in Reviews')
plt.xlabel('Sentiment Score')
plt.ylabel('Frequency')
plt.show()

# 4. Top Conditions by Rating
top_conditions = merged_data.groupby('condition')['rating'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_conditions.index, y=top_conditions.values, palette='viridis')
plt.title('Top 10 Conditions by Average Rating')
plt.ylabel('Average Rating')
plt.xticks(rotation=45)
plt.show()

# 7. Sentiment vs Rating
plt.figure(figsize=(10, 6))
sns.scatterplot(x='sentiment_score', y='rating', data=merged_data, alpha=0.5)
plt.title('Sentiment Score vs. Rating')
plt.xlabel('Sentiment Score')
plt.ylabel('Rating')
plt.show()

# 8. Prescription Trends by Specialty
top_specialties = medicine_prescription['specialty'].value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_specialties.index, y=top_specialties.values, palette='muted')
plt.title('Top 10 Specialties by Prescription Count')
plt.ylabel('Prescriptions')
plt.xticks(rotation=45)
plt.show()

# 9. Outlier Detection for Key Features
fig, axes = plt.subplots(1, 2, figsize=(16, 6))
sns.boxplot(y=merged_data['rating'].dropna(), ax=axes[0], color='coral').set(title='Rating Outliers')
sns.boxplot(y=merged_data['product_price'].dropna(), ax=axes[1], color='lightblue').set(title='Product Price Outliers')
plt.show()

# 10. Drug Interaction Frequency
drug_interactions_flat = [item for sublist in medicine_data['drug_interactions'] for item in sublist]
interaction_counts = pd.Series(drug_interactions_flat).value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=interaction_counts.index, y=interaction_counts.values, palette='Set2')
plt.title('Top 10 Common Drug Interactions')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.show()

# 11. Patient Demographics Analysis
drug200['BP'] = drug200['BP'].astype(str)
sns.countplot(x='BP', data=drug200, palette='pastel')
plt.title('Blood Pressure Distribution in Patients')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(drug200['Na_to_K'], bins=30, kde=True)
plt.title('Distribution of Na_to_K Ratio')
plt.xlabel('Na_to_K Ratio')
plt.ylabel('Frequency')
plt.show()

